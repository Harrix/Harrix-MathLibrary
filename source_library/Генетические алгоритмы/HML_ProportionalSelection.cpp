int HML_ProportionalSelection(double *Fitness, int VHML_N)
{
/*
Пропорциональная селекция. Оператор генетического алгоритма. Работает с массивом пригодностей.
Входные параметры:
 Fitness - массив пригодностей (можно подавать не массив пригодностей, а массив значений целевой функции, но только для задач безусловной оптимизации);
 VHML_N - размер массива пригодностей.
Возвращаемое значение:
 Номер выбранной пригодности, а, соответственно, номер индивида популяции.
Примечание:
 Использовать реализацию оператора ГА в виде этой функции нецелесообразно ввиду того, что при каждом запуске
 создается дополнительный массив.
 Данная функция аналогична по действию (результат действия аналогичен):
 1. Связке функций HML_MakeVectorOfProbabilityForProportionalSelectionV2 и HML_ProportionalSelectionV2
 2. Функции HML_ProportionalSelectionV3
 Различия по временным затратам на выполнение. У этой реализации самое большое время выполнения.
*/
//Выбор в пропорциональной селекции производится согласно вектору вероятностей выбора индивидов.
//Создадим этот вектор
double *VectorOfProbability;
VectorOfProbability=new double[VHML_N];

//Вектор Fitness мы не меняем. Поэтому проводим копирование.
HML_VectorToVector(Fitness,VectorOfProbability,VHML_N);

//Проводим нормировку вектора, с целью получения вектора вероятностей.
//Нормировка вектора чисел такая, чтобы максимальный элемент имел значение 1, а минимальный 0.
//После данный нормализованный вектор сжимается так чтобы сумма всех элементов стала равна 1.
HML_NormalizationVectorOne (VectorOfProbability,VHML_N);

//Зная теперь вероятность выбора каждого индивида, проводим случайный выбор индивида.
int VHML_Result=HML_SelectItemOnProbability(VectorOfProbability,VHML_N);

delete [] VectorOfProbability;

//Возвращаем номер выбранного индивида
return VHML_Result;
}