        int ChromosomeLength=50;//Длина хромосомы
        int CountOfFitness=50*50;//Число вычислений целевой функции
        int TypeOfSel=1;//Тип селекции
        int TypeOfCros=0;//Тип скрещивания
        int TypeOfMutation=1;//Тип мутации
        int TypeOfForm=0;//Тип формирования нового поколения
        double Proportion=0.4;//"Доля" числа поколений от числа вычислений целевой функции

        double *ParametersOfAlgorithm;
        ParametersOfAlgorithm=new double[7];
        ParametersOfAlgorithm[0]=ChromosomeLength;//Длина хромосомы
        ParametersOfAlgorithm[1]=CountOfFitness;//Число вычислений целевой функции
        ParametersOfAlgorithm[2]=TypeOfSel;//Тип селекции
        ParametersOfAlgorithm[3]=TypeOfCros;//Тип скрещивания
        ParametersOfAlgorithm[4]=TypeOfMutation;//Тип мутации
        ParametersOfAlgorithm[5]=TypeOfForm;//Тип формирования нового поколения
        ParametersOfAlgorithm[6]=Proportion;//"Доля" числа поколений от числа вычислений целевой функции

        int *Decision;//бинарное решение
        Decision=new int[ChromosomeLength];
        double ValueOfFitnessFunction;//значение функции пригодности в точке Decision
        int VMHL_Success=0;//Успешен ли будет запуск cГА

        //Запуск алгоритма
        VMHL_Success=MHL_BinaryGeneticAlgorithmWDPOfNOfGPS (ParametersOfAlgorithm,Func, Decision, &ValueOfFitnessFunction);

        //Используем полученный результат
        MHL_ShowNumber(VMHL_Success,"Как прошел запуск","VMHL_Success");
        //Как прошел запуск:
        //VMHL_Success=1

        if (VMHL_Success==1)
         {
         MHL_ShowVectorT(Decision,ChromosomeLength,"Найденное решение","Decision");
         //Найденное решение:
         //Decision =
         //1	1	1	1	1	1	1	1	1	1	1	1	0	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	0	1	1	1	1	1	1	1	1	1	1	1	0	1	1	1	1	1	1	1	1

         MHL_ShowNumber(ValueOfFitnessFunction,"Значение функции пригодности","ValueOfFitnessFunction");
         //Значение функции пригодности:
         //ValueOfFitnessFunction=47