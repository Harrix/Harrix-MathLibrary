template <class T> void HML_RandomArrangingObjectsIntoBaskets(T *VHML_ResultVector, int N, int VHML_N)
{
/*
Функция предлагает случайный способ расставить N объектов в VHML_N корзин при условии, что
в каждой корзине может располагаться только один предмет.
Входные параметры:
 VHML_ResultVector - массив, в который записывается результат;
 N - число предметов;
 VHML_N - размер массива (и число корзин).
Возвращаемое значение:
 Отсутствует.
Примечание:
 В VHML_ResultVector 0 удет означать отсутствие предмета, 1 - наличие.
*/
if (N<0) N=0;// должен быть хотя бы один предмет
if (N>VHML_N) N=VHML_N;

int j;//Счетчик
int p;//Текущее число свободнных участников
int r;//случайное число для определения победителя
int g=0;//Номер выбранного участника

HML_ZeroVector(VHML_ResultVector,VHML_N);// Пока никого

if (N>0)
 {//Если есть хотя бы один предмет
 r=HML_RandomUniformInt(0,VHML_N);
 VHML_ResultVector[r]=1;//отметили первую корзину

 for (int i=1;i<N;i++)
  {//выбор еще одной корзины
  r=HML_RandomUniformInt(0,VHML_N-i);//на один меньше можно выбрать, чем в предыдущий раз
  p=0;//Текущее число свободных корзин
  j=0;//Счетчик

  while (p!=r+1)
   {
   //Ищем нашу корзину
   if (VHML_ResultVector[j]==0)
    {
    //Нашли свободную корзину. Возможно это наша.
    p++;
    g=j;
    }
   j++;
   }

  //Теперь g - номер нашей корзины
  VHML_ResultVector[g]=1;//Поместим предмет
  }//выбор еще одной корзины
 }//Если есть хотя бы один предмет
}